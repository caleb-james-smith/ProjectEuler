# prob_012.py

# Problem 12
#
# The sequence of triangle numbers is generated by adding the natural numbers.
#
# So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
#
# The first ten terms would be:
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
#
# Let us list the factors of the first seven triangle numbers:
#
#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
#
# We can see that 28 is the first triangle number to have over five divisors.
#
# What is the value of the first triangle number to have over five hundred divisors?
#
# Using nohup and redirecting output:
# nohup mycommand > mycommand.out 2>&1 &
#
# nohup python3 python/prob_012.py > logs/prob_012.log 2>&1 &
#

from Primes import Primes
import time

def solve(n_divisors_limit):
    P = Primes()
    i = 1
    t = 0 
    current_max = -1
    going = True
    while going:
        t += i
        divs = P.divisors(t)
        n_divs = len(divs)
        if n_divs > current_max:
            current_max = n_divs
            print("{0}: t={1}, n_divs={2}".format(i, t, n_divs), flush=True)
        #print("{0}: t={1}, n_divs={2}, {3}".format(i, t, n_divs, divs))
        if n_divs > n_divisors_limit:
            going = False
        i += 1 
    return t

def main():
    start_time = time.time()
    x = solve(500)
    end_time = time.time()
    
    run_time = end_time - start_time 
    
    print("answer: {0}".format(x))
    print("run time: {0:.3f} seconds".format(run_time))

main()

